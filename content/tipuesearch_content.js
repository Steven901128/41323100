var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 電腦輔助設計與實習 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams 線上參與，6人一組每三週發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題 : \n w3: 用什麼套件完成  5-bar Linkage Plotter  與  Openduck mini  零組件設計繪圖？  Solvespace ,  Siemens NX ,  Onshape  或其他？各有什麼優缺點？ ( plotter.7z ,  open_duck_mini.7z ) \n w7 ( 2a 採 Youtube 影片簡報 ):  5-bar Linkage Plotter  與  Openduck mini \xa0零組件設計繪製完成之後，如何切割零件? 為何要切割零件？ 如何利用  Webots  進行後續的控制系統設計與動態模擬 (Dynamic Simulation)？( plotter_project.7z ) \n w10:  Webots  是什麼？有什麼特點？ 如何進行場景模擬？ 如何用 Python 進行控制系統設計？ ( Tutorial ) \n w14:  Webots  的模型有沒有辦法用程式方法建立? 有沒有辦法直接從 CAD 套件中轉出  Webots  的場景模型？ \n w17: 如何實作一套  5-bar Linkage Plotter  與  Openduck mini ？( Disney Bipedal Robot ) \n w18: 課程總結 \n 個人與分組網站維護 (40%)  - 每週至少兩次推送與課程進度相關的學習內容與心得。 \n w9 期中自評、w18 期末自評 \n', 'tags': '', 'url': 'About.html'}, {'title': 'W3', 'text': '機器人頭部設計繪圖 \n \n 動畫解析 \n \n 優缺點分析: \n 本次使用 SolidWorks 繪製機器人，相比Onshape來說，SolidWorks的使用熟練度較高，在組裝，繪製零件，製作動畫上比使用Onshape效率還要高很多，但目前的缺點是存檔問題，Onshape在這點上就方便很多，有自動存檔在雲端以及提供多人編輯的功能。 \n 繪製心得: \n \n \n \n \n 工作臺設計 \n \n 設計結果 \n \n 設計心得: \n https://www.instructables.com/Plot-Clock-for-dummies/ \n 在進行工作臺與機器人設計的過程中，我們不只是把零件「畫出來」，而是真正體會到設計從無到有的挑戰。從草圖繪製、尺寸設定，到零件裝配與機構檢查，每一個步驟都需要不斷嘗試與修正，尤其在處理連桿機構時，只要某個角度或長度稍有偏差，就會導致整個結構卡住或無法運動。 \n 此外，設計時並不是一開始就有明確的方向，很多構想都是邊做邊調整。例如馬達尚未建模時，我們決定先用桿件代替，這種「用有限資源完成設計」的思維讓我們學到彈性應對的重要性。而在參考國外案例的同時，我們也試著做出自己的改良，讓設計不只是模仿，而是創造。 \n 整體而言，這次的設計經驗不只是技術上的提升，更讓我們學會了團隊溝通、解決問題與在限制中完成任務的能力。這些都是課本學不到的實戰經驗。 \n 在繪製連桿機構的過程中，我們對老師提供的連桿尺寸產生了好奇，想進一步了解這些數據是如何推導出來的。雖然我們目前還沒有完全掌握機構學的理論與計算方式，但身為大學生的我們仍希望深入理解背後原理。因此，我們主動尋求 GPT 的協助，試圖解釋四連桿的運動原理與計算方式，並整理出了以下的分析內容。 \n \n \n \n 定義座標與符號 \n \n \n 將基座（ground）兩個固定鉸點放在坐標系上：左基座點  O = ( 0 , 0 ) O=(0,0) O = ( 0 , 0 ) ，右基座點  G = ( g , 0 ) G=(g,0) G = ( g , 0 ) ，所以基座長度為  g g g 。 \n \n \n 四個連桿長度：輸入連桿（從  O O O  出發）長度  a a a ，輸出連桿（接在基座  G G G  的那根）長度  b b b ，耦合桿（floating link）長度  f f f ，ground（基座）長度  g g g 。 \n \n \n 角度：輸入角  θ \\theta θ （輸入連桿相對  x x x  軸的角度），輸出角  ϕ \\phi ϕ （輸出連桿相對  x x x  軸的角度），耦合桿相對某軸的角度  γ \\gamma γ 。 \n \n \n \n \n 向量環路方程（位置閉合）  四連桿的向量環路可以寫成（以向量形式）： \n r ⃗ a + r ⃗ f = r ⃗ g + r ⃗ b \n 展開成 x、y 分量： \n a cos \u2061 θ + f cos \u2061 γ = g + b cos \u2061 ϕ a\\cos\\theta + f\\cos\\gamma = g + b\\cos\\phi a sin \u2061 θ + f sin \u2061 γ = b sin \u2061 ϕ \n 這是典型的兩條方程，未知數通常是  γ \\gamma γ 、 ϕ \\phi ϕ （給定  θ \\theta θ  與所有長度即可解出  ϕ \\phi ϕ ）——這就稱作 位置分析 。有多種代數方法可以把這兩條方程化簡成求  ϕ \\phi ϕ  的單一方程（Freudenstein 方程或把  γ \\gamma γ  消去後得到形如  A cos \u2061 ϕ + B sin \u2061 ϕ = C A\\cos\\phi + B\\sin\\phi = C A cos ϕ + B sin ϕ = C  的式子）。 \n \n \n 由已知長度求角度（位置分析）——實作步驟 \n \n \n 代入並把  γ \\gamma γ  消去（把兩條方程平方相加或重組），最後可得到一個形如 \n A cos \u2061 ϕ + B sin \u2061 ϕ = C \n 的線性三角方程（其中 A、B、C 由  a , g , θ , b , f a,g,\\theta,b,f a , g , θ , b , f  組成）。 \n \n \n 解這類方程的方法：把它轉為單一正切式或用反正切公式，常見解法是 \n ϕ = 2 arctan \u2061 \u2009\u2063 ( − B ± A 2 + B 2 − C 2 A + C ) \\phi = 2\\arctan\\!\\left(\\frac{-B \\pm \\sqrt{A^2+B^2-C^2}}{A+C}\\right) \n （符號、分子分母形式有不同等價寫法，實作時要小心正負根與分支選擇以符合機構的構型）。 \n \n \n 一旦  ϕ \\phi ϕ  解出，就能回代求  γ \\gamma γ （例如由  a sin \u2061 θ + f sin \u2061 γ = b sin \u2061 ϕ a\\sin\\theta + f\\sin\\gamma = b\\sin\\phi a sin θ + f sin γ = b sin ϕ  求  γ \\gamma γ ）。 \n \n \n （參考資料：四連桿位置分析與 Freudenstein 方程的推導，可見教科書或線上教材。） \n \n \n \n \n 分工:\xa0 \n 41323117:尺寸分析和機器人設計 \n 41323116:資料查詢和四連桿設計 \n 41323124: 機器人設計和繪製 \n 41323113:資料查詢和尺寸分析 \n 41323125:工作台設計和動畫 \n 41123153:動畫設計和四連桿繪製', 'tags': '', 'url': 'W3.html'}]};