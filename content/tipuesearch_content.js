var tipuesearch = {"pages": [{'title': '關於', 'text': '課程名稱：電腦輔助設計與實習 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams線上參與，每三週6人一組發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題 ： \n w3: 使用什麼套件完成 5-bar Linkage Plotter 與 Openduck mini 零組件設計繪圖？ Solvespace 、 Siemens NX 、 Onshape 或其他？各有什麼優缺點？ （ plotter.7z 、 open_duck_mini.7z ） \n w7 (  2a 採Youtube影片簡報 ):  5-bar Linkage Plotter 與 Openduck mini \xa0零組件設計完成後，如何切割零件？ 為何要切削零件？如何利用 Webots 進行後續的控制系統設計與動態模擬（動態模擬）？ (  plotter_project.7z  ) \n w10:  Webbots 是什麼？有什麼特點？如何進行場景模擬？如何用Python進行控制系統設計？ （ 教程 ） \n w14： Webots 的模型有沒有可行的方案方法？ 有沒有辦法直接從CAD套件轉出 Webots 的場景模型？ \n w17: 如何實施一組 五連桿繪圖儀 與 Openduck mini ？ （ 迪士尼雙足機器人 ） \n w18: 課程總結 \n 個人與分組網站維護（40%）  -每週至少兩次與進度課程相關的學習內容與心得。 \n w9期中自評、w18期末自評 \n', 'tags': '', 'url': '關於.html'}, {'title': 'W3', 'text': '機器人頭部設計圖紙 \n \n 動畫解析 \n \n 優點分析： \n 本次使用 SolidWorks 機器人，相比Onshape來說，SolidWorks的使用掌握度較高，在完成，較差零件，製作動畫上比使用Onshape效率要高很多，但目前的結局是歸檔問題，Onshape在這上方便就很多，在雲端有自動歸檔以及提供多人編輯的功能。 \n 不夠心得: \n \n \n \n \n 工作台設計 \n \n 設計結果 \n \n 設計心得： \n https://www.instructables.com/Plot-Clock-for-dummies/ \n 在進行工作台與機器人設計的過程中，我們不是只是把零件「畫出來」，而是真正體驗到設計從無到有的挑戰。從草圖不同、尺寸設定，到零件組裝與機構檢查，每個步驟都需要不斷嘗試與修改，尤其是在處理連桿機構時，只要某個角度或高度稍有偏差，就會導致整個結構卡住或移動錯誤。 \n 另外，設計時並不是一開始就明確的方向，很多構想都是邊做邊調整。例如馬達尚未建模時，我們先決定用桿件代替，這種「用有限資源完成設計」的思維讓我們領悟到彈性思維的重要性。而在參考國外案例的同時，我們也嘗試做自己的改良，讓設計不只是模仿，而是創作。 \n 整體來看，這次的設計經驗不只是技術上的提升，更讓我們學會了團隊溝通、解決問題與在限制中完成任務的能力。這些都是課本學不到的實戰經驗。 \n 在相關連桿機構的過程中，我們對老師提供的連桿尺寸目前產生了好奇，想進一步了解這些數據是如何推導出來的。雖然我們還沒有完全掌握機構學的理論與計算方式，但身為大學生的我們仍在研究理解背後原理。因此，主動整理尋求GPT的我們的協助，試圖解釋四連桿的運動原理與計算方式，並希望產生以下內容的分析。 \n \n \n \n 定義座標與符號 \n \n \n 立柱（地面）兩個固定立柱點放置座標系上：左立柱點 哦 = （ 0 ， 0 ） O=(0,0) 哦 = （ 0  ， 0  ) ，右基座點 格 = （ 克 ， 0 ） G=(g,0) 格 = （ 克 ， 0  ) ，所以豎立高度為 克 克 克 。 \n \n \n 四個連桿長度：輸入連桿（從 哦 哦 O 出發）長度 一個 一個 a ，輸出連桿（接在底座上 格 格 G 的那根）長度 b b b ，連接桿（浮動連接）長度 f f f ，地面（基座）長度 克 克 克 。 \n \n \n 角度：輸入角度 θ \\θ θ （輸入連桿相對 x x x 軸的角度），輸出角度 φ \\phi ψ （輸出連桿相對） x x x 軸的角度），連接桿相對某一軸的角度 γ \\伽馬 γ 。 \n \n \n \n \n 支撐環路方程式（位置閉合） 四連桿的支撐迴路可以寫成（以支撐形式）： \n r ⃗ 一個 + r ⃗ f = r ⃗ 克 + r ⃗ b \n 展開成x、y數量： \n 一個 餘弦 \u2061 θ + f 餘弦 \u2061 γ = 克 + b 餘弦 \u2061 φ a\\cos\\theta + f\\cos\\gamma = g + b\\cos\\phi 一個 罪 \u2061 θ + f 罪 \u2061 γ = b 罪 \u2061 φ \n 這是典型的過剩方程，未知數通常是 γ \\伽馬 γ 、 φ \\phi ψ （給定 θ \\θ θ 與所有長度即可解出 φ \\phi ψ ）——即所謂的 位置分析 。有多種代數方法可以把這取消方程式化簡稱求 φ \\phi ψ 的單一方程式（Freudenstein 方程式或把 γ \\伽馬 γ 消去後得到形如 一個 餘弦 \u2061 φ + B 罪 \u2061 φ = C A\\cos\\phi + B\\sin\\phi = C 一個 餘弦 φ + B 罪 φ = C 的式子）。 \n \n \n 透過已知長度求角度（位置分析）－實踐步驟 \n \n \n 代入並把 γ \\伽馬 γ 消去（以備用方程式平方相加或重組），最後可得到一個形如 \n 一個 餘弦 \u2061 φ + B 罪 \u2061 φ = C \n 的線性三角方程式（其中A、B、C由 一個 ， 克 ， θ ， b ， f a,g,\\theta,b,f 一個 ， 克 ， θ  ， b  ， f 組成）。 \n \n \n 解此類方程式的方法：把它轉為單一正切公式或用不同切公式，常見的解法是 \n φ = 2 反正切 \u2061 \u2009\u2063 （ − B ± 一個 2 + B 2 − C 2 一個 + C ） \\phi = 2\\arctan\\!\\left(\\frac{-B \\pm \\sqrt{A^2+B^2-C^2}}{A+C}\\right) \n （符號、分子分母形式有不同等價寫法，實作時要小心正負根與分支選擇符合機構的結構型）。 \n \n \n 一旦 φ \\phi phi 解出，可以回代求 γ \\伽馬 γ （例如由 一個 罪 \u2061 θ + f 罪 \u2061 γ = b 罪 \u2061 φ a\\sin\\theta + f\\sin\\gamma = b\\sin\\phi 一個 罪 θ + f 罪 γ = b 罪 求 γ \\伽馬 γ ）。 \n \n \n （參考資料：四連桿位置分析與Freudenstein方程式的推導，可見教科書或線上教材。） \n \n \n \n \n 分工：\xa0 \n 41323117：尺寸分析與機器人設計 \n 41323116：資料查詢與四連桿設計 \n 41323124： 機器人設計與情境 \n 41323113：資料查詢與尺寸分析 \n 41323125：工作台設計與動畫 \n 41123153:動畫設計和四連桿機構', 'tags': '', 'url': 'W3.html'}]};