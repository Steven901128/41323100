var tipuesearch = {"pages": [{'title': '關於', 'text': '課程名稱：電腦輔助設計與實習 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams線上參與，每三週6人一組發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題 ： \n w3: 使用什麼套件完成 5-bar Linkage Plotter 與 Openduck mini 零組件設計繪圖？ Solvespace 、 Siemens NX 、 Onshape 或其他？各有什麼優缺點？ （ plotter.7z 、 open_duck_mini.7z ） \n w7 (  2a 採Youtube影片簡報 ):  5-bar Linkage Plotter 與 Openduck mini \xa0零組件設計完成後，如何切割零件？ 為何要切削零件？如何利用 Webots 進行後續的控制系統設計與動態模擬（動態模擬）？ (  plotter_project.7z  ) \n w10:  Webbots 是什麼？有什麼特點？如何進行場景模擬？如何用Python進行控制系統設計？ （ 教程 ） \n w14： Webots 的模型有沒有可行的方案方法？ 有沒有辦法直接從CAD套件轉出 Webots 的場景模型？ \n w17: 如何實施一組 五連桿繪圖儀 與 Openduck mini ？ （ 迪士尼雙足機器人 ） \n w18: 課程總結 \n 個人與分組網站維護（40%）  -每週至少兩次與進度課程相關的學習內容與心得。 \n w9期中自評、w18期末自評 \n', 'tags': '', 'url': '關於.html'}, {'title': 'W3', 'text': '機器人頭部設計圖紙 \n \n 動畫解析 \n \n 優點分析： \n 本次使用 SolidWorks 機器人，相比Onshape來說，SolidWorks的使用掌握度較高，在完成，較差零件，製作動畫上比使用Onshape效率要高很多，但目前的結局是歸檔問題，Onshape在這上方便就很多，在雲端有自動歸檔以及提供多人編輯的功能。 \n 不夠心得: \n \n \n <<<<<<< HEAD \n 工作台繪製: \n \n ======= \n \n \n 工作台設計 \n \n 設計結果 \n \n 設計心得： \n https://www.instructables.com/Plot-Clock-for-dummies/ \n 在進行工作台與機器人設計的過程中，我們不是只是把零件「畫出來」，而是真正體驗到設計從無到有的挑戰。從草圖不同、尺寸設定，到零件組裝與機構檢查，每個步驟都需要不斷嘗試與修改，尤其是在處理連桿機構時，只要某個角度或高度稍有偏差，就會導致整個結構卡住或移動錯誤。 \n 另外，設計時並不是一開始就明確的方向，很多構想都是邊做邊調整。例如馬達尚未建模時，我們先決定用桿件代替，這種「用有限資源完成設計」的思維讓我們領悟到彈性思維的重要性。而在參考國外案例的同時，我們也嘗試做自己的改良，讓設計不只是模仿，而是創作。 \n 整體來看，這次的設計經驗不只是技術上的提升，更讓我們學會了團隊溝通、解決問題與在限制中完成任務的能力。這些都是課本學不到的實戰經驗。 \n 在相關連桿機構的過程中，我們對老師提供的連桿尺寸目前產生了好奇，想進一步了解這些數據是如何推導出來的。雖然我們還沒有完全掌握機構學的理論與計算方式，但身為大學生的我們仍在研究理解背後原理。因此，主動整理尋求GPT的我們的協助，試圖解釋四連桿的運動原理與計算方式，並希望產生以下內容的分析。 \n \n \n \n 定義座標與符號 \n \n \n 立柱（地面）兩個固定立柱點放置座標系上：左立柱點 哦 = （ 0 ， 0 ） O=(0,0) 哦 = （ 0  ， 0  ) ，右基座點 格 = （ 克 ， 0 ） G=(g,0) 格 = （ 克 ， 0  ) ，所以豎立高度為 克 克 克 。 \n \n \n 四個連桿長度：輸入連桿（從 哦 哦 O 出發）長度 一個 一個 a ，輸出連桿（接在底座上 格 格 G 的那根）長度 b b b ，連接桿（浮動連接）長度 f f f ，地面（基座）長度 克 克 克 。 \n \n \n 角度：輸入角度 θ \\θ θ （輸入連桿相對 x x x 軸的角度），輸出角度 φ \\phi ψ （輸出連桿相對） x x x 軸的角度），連接桿相對某一軸的角度 γ \\伽馬 γ 。 \n \n \n \n \n 支撐環路方程式（位置閉合） 四連桿的支撐迴路可以寫成（以支撐形式）： \n r ⃗ 一個 + r ⃗ f = r ⃗ 克 + r ⃗ b \n 展開成x、y數量： \n 一個 餘弦 \u2061 θ + f 餘弦 \u2061 γ = 克 + b 餘弦 \u2061 φ a\\cos\\theta + f\\cos\\gamma = g + b\\cos\\phi 一個 罪 \u2061 θ + f 罪 \u2061 γ = b 罪 \u2061 φ \n 這是典型的過剩方程，未知數通常是 γ \\伽馬 γ 、 φ \\phi ψ （給定 θ \\θ θ 與所有長度即可解出 φ \\phi ψ ）——即所謂的 位置分析 。有多種代數方法可以把這取消方程式化簡稱求 φ \\phi ψ 的單一方程式（Freudenstein 方程式或把 γ \\伽馬 γ 消去後得到形如 一個 餘弦 \u2061 φ + B 罪 \u2061 φ = C A\\cos\\phi + B\\sin\\phi = C 一個 餘弦 φ + B 罪 φ = C 的式子）。 \n \n \n 透過已知長度求角度（位置分析）－實踐步驟 \n \n \n 代入並把 γ \\伽馬 γ 消去（以備用方程式平方相加或重組），最後可得到一個形如 \n 一個 餘弦 \u2061 φ + B 罪 \u2061 φ = C \n 的線性三角方程式（其中A、B、C由 一個 ， 克 ， θ ， b ， f a,g,\\theta,b,f 一個 ， 克 ， θ  ， b  ， f 組成）。 \n \n \n 解此類方程式的方法：把它轉為單一正切公式或用不同切公式，常見的解法是 \n φ = 2 反正切 \u2061 \u2009\u2063 （ − B ± 一個 2 + B 2 − C 2 一個 + C ） \\phi = 2\\arctan\\!\\left(\\frac{-B \\pm \\sqrt{A^2+B^2-C^2}}{A+C}\\right) \n （符號、分子分母形式有不同等價寫法，實作時要小心正負根與分支選擇符合機構的結構型）。 \n \n \n 一旦 φ \\phi phi 解出，可以回代求 γ \\伽馬 γ （例如由 一個 罪 \u2061 θ + f 罪 \u2061 γ = b 罪 \u2061 φ a\\sin\\theta + f\\sin\\gamma = b\\sin\\phi 一個 罪 θ + f 罪 γ = b 罪 求 γ \\伽馬 γ ）。 \n \n \n （參考資料：四連桿位置分析與Freudenstein方程式的推導，可見教科書或線上教材。） \n \n \n \n \n 分工：\xa0 \n 41323117：尺寸分析與機器人設計 \n 41323116：資料查詢與四連桿設計 \n 41323124： 機器人設計與情境 \n 41323113：資料查詢與尺寸分析 \n 41323125：工作台設計與動畫 \n 41123153:動畫設計和四連桿機構 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '\n plotter用onshape繪製的版本', 'tags': '', 'url': 'W4.html'}, {'title': 'W7', 'text': '此處PPT簡報錄影上傳YT後的存放位置。 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'Webot', 'text': 'Note: \n Soild節點代表剛體 ，一個關節實體可以被分解成若干剛體。 \n Webots 的物理引擎設計用於模擬剛體。設計模擬時，一個重要的步驟是將各種實體分解為單獨的剛體。 \n \xa0 \n 實作 #4：在場景樹視圖中，選擇最後一個節點並按「Add」按鈕。在對話框中，打開「Bases nodes」部分並選擇「 Solid 」節點。在場景樹視圖中，展開「 Solid 」節點並選擇其「children」欄位。使用「Add」按鈕向其添加一個「 Shape 」節點。選擇「 Shape 」節點的「appearance」欄位，並使用「Add」按鈕添加一個「PBRAppearance」節點。 \xa0\xa0\xa0 添加一個「Sphere」節點作為新創建的「 Shape 」節點的幾何欄位。 \xa0\xa0\xa0 展開「PBRAppearance」節點，將其「metalness」欄位更改為 0，並將其「roughness」欄位更改為 1。 \xa0\xa0\xa0 向「 Solid 」的「boundingObject」欄位添加另一個「 Sphere 」節點。 \xa0\xa0\xa0 最後，向「 Solid 」的「physics」欄位添加一個「Physics」節點。 \xa0\xa0\xa0 通過修改「 Solid 」節點的「translation」欄位，將球放置在機器人前面（例如在 {0.2, 0, 0.2}）。 \xa0\xa0\xa0 保存模擬。 \n The\xa0 Sphere \xa0 node specifies a sphere centered at (0,0,0) in the local coordinate system. The \xa0 radius \xa0 field specifies the radius of the sphere . \n ( Sphere 節點指定了一個以當地座標系 (0,0,0) 為中心的球體。 \n radius \xa0 欄位用來指定該球體的半徑) \n The subdivision field controls the number of faces of the rendered sphere. If the ico field is TRUE and the subdivision field is 0, the sphere is rendered as an icosahedron with 20 faces. If the subdivision field is 1 (default value), then each face of the icosahedron is subdivided into 4 faces, resulting in a 80 faces icosahedron. With a subdivision field set to 2, 320 faces will be rendered, making the sphere very smooth. A maximum value of 5 (corresponding to 20480 faces) is allowed for this subdivision field to avoid a very long rendering process. If the ico field is FALSE, then the sphere is rendered as a UV sphere, and the subdivision value has to be in the range [3, 32]. In this case the subdivision field specifies the number of rings and segments in which the sphere is subdivided. If the subdivision field is set to 3, then the sphere will have 3 rings and 3 segments, making 9 faces. With a subdivision field set to 32, the faces are 1024. The ico field specifies whether the sphere is rendered as an icosahedron (TRUE) or a UV sphere (FALSE). By default Sphere nodes created in Webots are icosahedrons with subdivision value of 1, whereas sphere geometries imported from VRML are UV spheres with a subdivision value of 24. \n \n subdivision \xa0 欄位控制球體在渲染時的面數。 若 \xa0 ico \xa0 欄位為 \xa0 TRUE \xa0 且 \xa0 subdivision \xa0 設為 \xa0 0 ，球體將以 \xa0 二十面體 (icosahedron) \xa0 方式繪製，共有 20 個面。 當 \xa0 subdivision \xa0 設為 \xa0 1 （預設值）時，二十面體的每個面會被細分為 4 個面，總共變成 80 個面。 若 \xa0 subdivision \xa0 設為 \xa0 2 ，則會產生 320 個面，使球體表面更加平滑。 為避免渲染時間過長， subdivision \xa0 的最大允許值為 \xa0 5 （對應 20,480 個面）。 \n 若 \xa0 ico \xa0 欄位為 \xa0 FALSE ，則球體會以 \xa0 UV sphere \xa0 方式繪製，且 \xa0 subdivision \xa0 的值必須介於 \xa0 [3, 32] \xa0 之間。 在此情況下， subdivision \xa0 欄位決定球體的「環數 (rings)」與「分段數 (segments)」。 例如： \n \n \n 當 \xa0 subdivision = 3 \xa0 時，球體有 3 個環與 3 個分段，共 9 個面。 \n \n \n 當 \xa0 subdivision = 32 \xa0 時，球體共有 1024 個面。 \n \n \n ico \xa0 欄位用來指定球體是以 \xa0 二十面體 (TRUE) \xa0 還是 \xa0 UV 球體 (FALSE) \xa0 方式繪製。 在 Webots 中，預設建立的 \xa0 Sphere \xa0 節點是 \xa0 二十面體 (ico = TRUE) \xa0 且 \xa0 subdivision = 1 ； 而從 \xa0 VRML \xa0 匯入的球體幾何則為 \xa0 UV sphere ， subdivision = 24 。 \n \n 這段話在解釋 \xa0 Webots 裡的「Sphere 節點」如何控制球體的外觀細緻程度與繪製方式 。 \n ico決定球體類型:TRUE為二十面體，FALSE為UV球體(經緯度分割縱環、橫環) \n \n \xa0 \n \n 實作結果如下圖: \n', 'tags': '', 'url': 'Webot.html'}]};